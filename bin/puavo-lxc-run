#!/bin/bash
# visudo:
#   jenkins ALL = NOPASSWD: /usr/local/bin/puavo-lxc-run
# or
#   jenkins ALL = NOPASSWD: /usr/bin/puavo-lxc-run

help(){
    echo "
    Usage: $(basename $0) <base container> <script to run> <script args>

    Execute given script in a temporary container.

    This must executed from the project root.
    "

}

[ "$1" = "--help" -o "$1" = "-h" ] && help && exit 0
[ "$1" = "" -o "$2" = ""  ] && help && exit 1

if [[ $EUID -ne 0 ]]; then
    echo "Must run run as root"
    exit 1
fi

slaveip=$(ifconfig eth0 | sed -rn '2 s/^\s+inet addr:([0-9\.]+).*$/\1/p')

echo "
    Running build on

    Node ip: $slaveip
    Node hostname: $(hostname)
    Git Branch: $(git rev-parse --abbrev-ref HEAD)
    Git Commit: $(git log --pretty=oneline -n 1)
"

basename="$1"
shift
script="$1"
shift
script_args="$1"
base="/var/lib/lxc/$basename"

set -eu

if [ ! -d $base ]; then
    echo "$base does not exists"
    exit 1
fi

containername="cirun-$(date +%s)"
lxcdir="/var/lib/lxc/$containername"
projectname=$(basename $(pwd))

echo "Cloning $basename"
lxc-clone -o $basename -n $containername

on_exit(){
    exitcode=$?
    # Always shutdown container on exit
    lxc-shutdown --name $containername || true
    lxc-wait --name $containername -s STOPPED

    if [ "$exitcode" = "0" ]; then
        echo "All OK. Destroying the container."
    else
        newname="BROKEN-$containername"

        echo "

        Something went wrong!
        Cloning container to /var/lib/lxc/$newname on $(hostname) $slaveip

        You can examine it by starting it with:

            lxc-start -n $newname

        Login with user ci and password ci. Project left as is to /cirun
        inside the container.
        "

        lxc-clone -o $containername -n $newname
    fi

    lxc-destroy --name $containername
}

trap on_exit EXIT


puavo-lxc-ci-prepare $containername

mkdir "$lxcdir/rootfs/cirun"
echo "Copying $(pwd) to /cirun for the container"
rsync -a $(pwd) "$lxcdir/rootfs/cirun"

cat > "$lxcdir/rootfs/run.sh"<<EOF
#!/bin/sh
set -eu

for i in \$(seq 100); do
    ip="\$(ifconfig eth0 | sed -rn '2 s/^\s+inet addr:([0-9\.]+).*$/\1/p')"
    if [ "\$ip" != "" ]; then
        echo "Container got ip \$ip!"
        break
    fi
    echo "Waiting for container to get network. Attempt \$i/100..."
    sleep 1
done

if [ "\$ip" = "" ]; then
    echo "Container failed to get network!"
    exit 1
fi

chown -R ci:ci /cirun
chmod +x /cirun/$projectname/$script
sudo -i -u ci sh -c "cd /cirun/$projectname && ./$script $script_args"
EOF
chmod +x "$lxcdir/rootfs/run.sh"

echo "Starting container $containername"
lxc-start --name $containername --daemon

lxc-wait --name $containername -s RUNNING
echo "Container up!"

lxc-attach --name $containername /run.sh

