#!/bin/bash
# visudo:
#   jenkins ALL = NOPASSWD: /usr/local/bin/puavo-lxc-run
# or
#   jenkins ALL = NOPASSWD: /usr/bin/puavo-lxc-run

help(){
    echo "
    Usage: $(basename $0) <base container name> <script to run> [script args]

    Execute given script in a temporary container.

    This must executed from the project root.
    "

}

[ "$1" = "--help" -o "$1" = "-h" ] && help && exit 0
[ "$1" = "" -o "$2" = ""  ] && help && exit 1

if [[ $EUID -ne 0 ]]; then
    echo "Must run run as root"
    exit 1
fi

slave_id=$(ifconfig eth0 | sed -rn '2 s/^\s+inet addr:([0-9\.]+).*$/\1/p')
broken_container_dir=/var/lib/lxc-broken

echo "
    Running build on

    Node ip: $slave_id
    Node hostname: $(hostname)
    Git Branch: $(git rev-parse --abbrev-ref HEAD)
    Git Commit: $(git log --pretty=oneline -n 1)
"

base_container="$1"
shift
script="$1"
shift
script_args="$@"
base_container_dir="/var/lib/lxc/$base_container"

set -eu

if [ ! -d $base_container_dir ]; then
    echo "$base_container_dir does not exists"
    exit 1
fi

running_container="cirun-$(date +%s)"
lxcdir="/var/lib/lxc/$running_container"
projectname=$(basename $(pwd))

echo "Cloning $base_container"
lxc-clone -o $base_container -n $running_container

on_exit(){
    exitcode=$?
    # Always shutdown container on exit
    lxc-shutdown --name $running_container || true
    lxc-wait --name $running_container -s STOPPED

    if [ "$exitcode" = "0" ]; then
        echo "All OK. Destroying the container."
        lxc-destroy --name $running_container
    else
        echo "

        Something went wrong!

        Moving container to $broken_container_dir on $(hostname) $slave_id

        You can examine it by moving it back and starting it

            mv $broken_container_dir/$running_container /var/lib/lxc
            lxc-start -n $running_container

        Login with user ci and password ci. Project is left as is to /cirun
        inside the container.

        "

        mkdir -p "$broken_container_dir"
        mv "/var/lib/lxc/$running_container" "$broken_container_dir"
    fi

}

trap on_exit EXIT


puavo-lxc-ci-prepare $running_container

mkdir "$lxcdir/rootfs/cirun"
echo "Copying $(pwd) to /cirun for the container"
rsync -a $(pwd) "$lxcdir/rootfs/cirun"

cat > "$lxcdir/rootfs/run.sh"<<EOF
#!/bin/sh

. /etc/environment

if [ "\$http_proxy" != "" ]; then
    echo
    echo "WARNING: Container is using a global HTTP proxy \$http_proxy"
    echo
fi

set -eu

for i in \$(seq 100); do
    ip="\$(ifconfig eth0 | sed -rn '2 s/^\s+inet addr:([0-9\.]+).*$/\1/p')"
    if [ "\$ip" != "" ]; then
        echo "Container got ip \$ip!"
        break
    fi
    echo "Waiting for container to get network. Attempt \$i/100..."
    sleep 1
done

if [ "\$ip" = "" ]; then
    echo "Container failed to get network!"
    exit 1
fi

chown -R ci:ci /cirun
chmod +x /cirun/$projectname/$script
echo
echo "Executing /cirun/$projectname/$script $script_args"
sudo -i -u ci sh -c "cd /cirun/$projectname && ./$script $script_args"
EOF
chmod +x "$lxcdir/rootfs/run.sh"

echo "Starting container $running_container"
lxc-start --name $running_container --daemon

lxc-wait --name $running_container -s RUNNING
echo "Container up!"

lxc-attach --name $running_container /run.sh

